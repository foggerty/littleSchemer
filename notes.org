Argh etc.

All of these notes are from chapter 8 onward, as that's where it gets seriously hard for someone with twenty years of OOP/imperative programming to get their head around things.

So far, when returning multiple s-expressions/atoms, they've been cons'd into a list:

#+BEGIN_SRC scheme

  (define (remove-1 lst)
    "Removes all 1s from lst."
    (cond ((null? lst) '())
          ((eq? 1 (car lst)) (remove-1 (cdr lst)))
          (else
           (cons (car lst) (remove-1 (cdr lst))))))

#+END_SRC

We're recurring on the cdr of the list as usual, building up a result set as we go along.  If we want to pass in a function that will have the resulting list applied to it, we'd probably go with something like:

#+BEGIN_SRC scheme

  (define (remove-1 lst cont)
    "Removes all 1s from lst and then applies result to cont(inuation)."
    (define (inner working accumulator)
      (cond ((null? working) accumulator)
            ((eq? 1 (car working)) (inner (cdr working) accumulator))
            (else
             (inner (cdr working) (cons (car working) accumulator)))))
    (cont (inner lst '())))

#+END_SRC

The idea behind chapter 8, is that instead of building a list, we're repeatedly building on a closure that's based on the initial function that was passed in.

So in this case, ~length~ would be passed in.  On the first iteration, the function calls itself with ~length~ wrapped in a closure, something like:

#+BEGIN_SRC scheme

  (remove-1 (cdr lst)
            (lambda (remainder)
              (length (cons (car lst) remainder)))))

#+END_SRC

And in the final iteration, the closure that's been built up is called with the empty list.

So we're still recurring on the cdr of lst, but building a closure within a closure with a closure.....  And when we reach the termination point (lst = nil), we call cont, passing in the empty list:

#+BEGIN_SRC scheme

  (define (remove-1 lst cont)
    (cond ((null? lst)
           (cont '()))
          ((eq? 1 (car lst))
           (remove-1 (cdr lst) cont))
          (else
           (remove-1 (cdr lst)
                     (lambda (remainder)
                       (cont (cons (car lst) remainder)))))))

  (remove-1 '(1 2 3 2 1) length)							; 3
  (remove-1 '(1 2 3 2 1) identity)						; (2 3 2)
  (remove-1 '(1 2 3 2 1) (lambda (x) (apply + x)))	; 7

#+END_SRC

The stack will look something like the following:

#+BEGIN_SRC scheme

  ;; iteration 1, cont is 

  length

  ;; iteration 2, return a function that takes x, and calls length on 2 consed onto x.

  (lambda (x)
    (length (cons 2 x)))

  ;; iteration 3, return a function that takes y, and calls a function
  ;; that takes x and calls length on 2 consed onto x, and passes 3
  ;; consed onto y in.  Honestly, I find it easier to read the code and
  ;; go "ahh, I get it" than to follow my own explanation :-(

  (lambda (y)
    ((lambda (x)
       (length (cons 2 x)))
     (cons 3 y)))

  ;; iteration 4, cont is

  (lambda (z)
    ((lambda (y)
       ((lambda (x)
          (length (cons 2 x)))
        (cons 3 y)))
     (cons 2 z)))

  ;; If we were to call the above, passing in the empty list:

  ((lambda (z)
    ((lambda (y)
       ((lambda (x)
          (length (cons 2 x)))
        (cons 3 y)))
     (cons 2 z))) '())							 ; 3

  ;; Or using the identity function:

  ((lambda (z)
    ((lambda (y)
       ((lambda (x)
          (identity (cons 2 x)))
        (cons 3 y)))
     (cons 2 z))) '())							 ; (2 3 2)

  ;; So unwinding the stack, we get:

  ((lambda (y)
     ((lambda (x)
        (length (cons 2 x)))
      (cons 3 y)))
   '(2))											 ; 3

  ((lambda (x)
     (length (cons 2 x)))
   '(3 2))											 ;3

  (length '(2 3 2))								 ;3

#+END_SRC
